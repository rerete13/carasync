from aiogram import types, Router, types, F
from bot_func import is_user_subscribed
from btns import menu_keyboard_btn, inline_user_subscribe_start, inline_menu_btn, inline_keyboard_call, more_response_btn, top_car_btn, city_repaire_choose_btn, inline_keyboard_url
from data_func import create_user_data_mongo, get_info_about_mongo
from another_info import all_comments, top_cars_sales
from bot_func import create_city_repaire_service_call, get_count_days_mongo
from get_car_info import get_comment_number_bazagai
from american_info import get_american_car_info
from asyncio import sleep
from time import sleep as block_sleep
from aiogram.types import LabeledPrice


router = Router()




@router.callback_query(F.data == 'back')
async def callback_return(callback: types.callback_query):
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='–ú–µ–Ω—é', reply_markup=inline_menu_btn())



@router.callback_query(F.data == 'sub_check')
async def callback_return(callback: types.callback_query):
    if await is_user_subscribed(callback.message) == True:
        await callback.bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        # await create_user_data(callback.message, 'user-data')
        await create_user_data_mongo(callback.message)
        await callback.message.answer("<b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ç–∞–∫—ñ–π —Ñ–æ—Ä–º—ñ:</b> AA7777AA", reply_markup=menu_keyboard_btn())
        
    else:
        await callback.message.answer("<b>–ü—ñ–¥–ø–∏—à–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:</b>üèé @autopars3", reply_markup=inline_user_subscribe_start())



@router.callback_query(F.data.startswith("respons_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]

    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...')
    
    if action == "3":
        out = ''
        for i in range(3):
            # This comment clarifies that you are awaiting the all_comments(i) coroutine and then accessing the first element of the resulting list. It can serve as a helpful reminder for anyone reading the code, including yourself in the future, about the purpose of that specific line.
            out += (await all_comments(i))[0] + '\n\n'

        out += '\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot'
            
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=out, reply_markup=more_response_btn())

        
    if action == "9":
        out = ''
        for i in range(9):
            out += (await all_comments(i))[0] + '\n\n'

        out += '\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot'
            
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=out, reply_markup=inline_keyboard_call(text='–ù–∞–∑–∞–¥ ‚≠ïÔ∏è', call='back'))



@router.callback_query(F.data.startswith("top_car_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[2]

    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...')
    
    if action == "10":
        out = ''
        info = (await top_cars_sales())
        for i in range(10):
            out += info[i] + '\n'

        out += '\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot'
            
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=out, reply_markup=top_car_btn())

        
    if action == "50":
        out = ''
        info = (await top_cars_sales())
        for i in range(50):
            out += info[i] + '\n'

        out += '\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot'
            
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=out, reply_markup=inline_keyboard_call(text='–ù–∞–∑–∞–¥ ‚≠ïÔ∏è', call='back'))



@router.callback_query(F.data == 'repairs')
async def callback_return(callback: types.callback_query):
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ', reply_markup= (await city_repaire_choose_btn()))
    


@router.callback_query(F.data.startswith("city_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]

    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...')
    
    if action == 'kyiv':
        await create_city_repaire_service_call(callback, 0)
        
    if action == 'kyivob':
        await create_city_repaire_service_call(callback, 1)
        
    if action == 'vinnycia':
        await create_city_repaire_service_call(callback, 2)
        
    if action == 'dnipro':
        await create_city_repaire_service_call(callback, 4)
        
    if action == 'frankivsk':
        await create_city_repaire_service_call(callback, 10)
         
    if action == 'lviv':
        await create_city_repaire_service_call(callback, 13)
                
    if action == 'odesa':
        await create_city_repaire_service_call(callback, 15)
        
    if action == 'poltava':
        await create_city_repaire_service_call(callback, 16)
        
    if action == 'kharkiv':
        await create_city_repaire_service_call(callback, 21)
        
    if action == 'hmelnyck':
        await create_city_repaire_service_call(callback, 23)
        
    if action == 'cherkasy':
        await create_city_repaire_service_call(callback, 24)
        
        

@router.callback_query(F.data == 'info')
async def callback_return(callback: types.callback_query):
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='info', reply_markup=inline_keyboard_call(text='–ù–∞–∑–∞–¥ ‚≠ïÔ∏è', call='back'))
    
    
    
@router.callback_query(F.data == 'owner')
async def callback_return(callback: types.callback_query):
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text="<b>B–ª–∞—Å–Ω–∏–∫:</b> @rerete13\n\n–ù–∞ —ó–∂—É:\n<code>4441111132314539</code> \n\n<b>USDT (TRC20)</b> \n<code>TVSrox5rnjdK7Y2WL4dji3qyfb9yGb616f</code> \n\n <b>BTC (BTC)</b> \n<code>bc1qsmy29mvt4gmfuex8xscalvnu5vfg6hjaf796ph</code>", reply_markup=inline_keyboard_call(text='–ù–∞–∑–∞–¥ ‚≠ïÔ∏è', call='back'))

    
    
@router.callback_query(F.data.startswith("v_"))
async def callback_return(callback: types.callback_query):
    action = callback.data.split("_")[1]
    
    if action != 'None':
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=f"Vincode: \n<code>{action}</code>\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot", reply_markup=inline_keyboard_call(' –ü–æ—à—É–∫ –ø–æ –ê–º–µ—Ä–∏—Ü—ñ', f'a_{action}'))

    else:
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=f'Vincode –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        
    
    
@router.callback_query(F.data.startswith("c_"))
async def callback_return(callback: types.callback_query):
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...')
    action = callback.data.split("_")[1]
    
    try:
        comments = await get_comment_number_bazagai(action)
        comments_sorted = ''
        
        for i in comments:
            comment = f'\n<b>–ê–≤—Ç–æ—Ä:</b> {i[0]}\n<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b>\n{i[1]}\n<b>–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b> \n{i[2]}\n'
            comments_sorted += comment
            
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=f'–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ—ó –¥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: \n\n<code>{action}</code>\n{comments_sorted}\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot')
    
    except:
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=f'–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ—ó –¥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: \n\n<code>{action}</code>\n\n <b>–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>')
            
    
    
@router.callback_query(F.data.startswith("a_"))
async def callback_return(callback: types.callback_query):
    action = callback.data.split("_")[1]
    if action != 'None':
        
        await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=f'<code>{action}</code>\n C–∫–æ–ø—ñ—é–π—Ç–µ —Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n\n –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot', reply_markup=inline_keyboard_url('–ü–µ—Ä–µ–π—Ç–∏ ‚úàÔ∏è', 'https://shre.su/0YEO'))
        
    #     try:
    #         await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=f'{callback.message.text}')
            
    #         wait = await callback.message.answer('‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...')
            
    #         photos, car_details, car_info = (await get_american_car_info(action))
            
    #         await callback.bot.delete_message(message_id=wait.message_id, chat_id=callback.message.chat.id)
            
    #         wait = await callback.message.answer('–í–∞—à –∑–∞–ø–∏—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è')
            
    #         block_sleep(5)
            
    #         for img in photos:
    #             await callback.message.answer_photo(img)
            
    #         cd = ''
    #         for i in car_details:
    #             cd += i + '\n'
                
    #         ci = ''
    #         for i in car_info:
    #             ci += i + '\n'
                
    #         await callback.message.answer(f'{cd}\n{ci}\n\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞–¥–∞–Ω–∞ –≤—ñ–¥: @autoparse_bot')
            
            
            
    #     except:
    #         await callback.bot.edit_message_text(message_id=wait.message_id, chat_id=callback.message.chat.id, text=f'M–∞—à–∏–Ω–∏ –∑ vincode: {action}\n –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–∏—Ö')
        

    # else:
    #     await callback.bot.edit_message_text(message_id=wait.message_id, chat_id=callback.message.chat.id, text=f'M–∞—à–∏–Ω–∏ –∑ vincode: {action}\n –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–∏—Ö')
        
        
        
@router.callback_query(F.data == 'account')
async def callback_return(callback: types.callback_query):
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...')
    
    id = int(callback.message.chat.id)
    days = (await get_count_days_mongo(id))
    languige = (await get_info_about_mongo(id, 'info', 'language'))
    findings_count = (await get_info_about_mongo(id, 'findings', None))
    findings_count = len(findings_count)
    count_premium_requests = (await get_info_about_mongo(id, 'subscribe', 'count'))
    sub_date = (await get_info_about_mongo(id, 'subscribe', 'count'))
    status = (await get_info_about_mongo(id, 'subscribe', 'status'))
    lotery_tikets = (await get_info_about_mongo(id, 'info', 'try-to-win'))
    
    
    text = f"""
üë§ –ú—ñ–π –∞–∫–∞—É–Ω—Ç: {id} \n\n
üìù –ú–æ–≤–∞: {languige} \n
‚è≥ –í—ñ–∫ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É: {days}  \n
üîó –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: {findings_count} \n\n
üé∞ –ö–≤–∏—Ç–∫—ñ–≤: {lotery_tikets} \n
üí∏ –ü—Ä–µ–º—ñ—É–º –∑–∞–ø–∏—Ç–∏: {count_premium_requests} \n
üîë –ó–∞–ª–∏—à–æ–∫ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏: {sub_date} \n
üìá –°—Ç–∞—Ç—É—Å: {status}
"""
    
    await callback.bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text=text, reply_markup=inline_keyboard_call(text='–ù–∞–∑–∞–¥ ‚≠ïÔ∏è', call='back'))





